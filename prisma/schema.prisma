// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model demo {
  did       Int      @id @default(autoincrement())
  name      String
  phone     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  uid       Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student    Student?
  instructor Instructor?
}

model Student {
  student_id      Int      @id @default(autoincrement())
  uid             Int      @unique
  student_name    String
  phone           String
  address         String
  date_of_birth   DateTime
  gender          String
  age             Int
  emailId         String
  password        String
  enrollment_date DateTime @default(now())
  classId         Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  class           Class   @relation(fields: [classId], references: [class_id])
  user            User    @relation(fields: [uid], references: [uid])
  Course          Course? @relation(fields: [courseCourse_id], references: [course_id])
  courseCourse_id Int?
}

model Instructor {
  instructor_id   Int      @id @default(autoincrement())
  uid             Int      @unique
  instructor_name String
  qualification   String
  gender          String
  experience      Decimal
  phone           String
  status          Status
  current_salary  String
  email           String   @unique
  password        String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user    User    @relation(fields: [uid], references: [uid])
  classes Class[]
}

model Course {
  course_id   Int    @id @default(autoincrement())
  class_id    Int
  course_name String
  description String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  students Student[]
  class    Class     @relation(fields: [class_id], references: [class_id])
}

model Class {
  class_id    Int        @id @default(autoincrement())
  class_name  String
  instructor  Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  instructors Instructor @relation(fields: [instructor], references: [instructor_id])

  Student Student[]
  courses Course[]
}

enum Role {
  student
  instructor
  admin
}

enum Status {
  active
  resigned
  pending
}
